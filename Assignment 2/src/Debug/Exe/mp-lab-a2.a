;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/16/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;/*
;  FPS Calculate:
;  "human eye can see between 30 and 60 frames per second."
;  So we should use 4*(TARGET_FPS) for , because we have 4 BCD (FPS /4 recieveid by every BCD)
;
;  > Timer0 Freq = 8 MHz / 1024(prescaler) = 7812 Hz
;
;  Then:
;  > Timer0_value = Timer0_freq / 4 * TARGET_FREQ
;
;  So we've:
;  - 0 for Max(1953) FPS Per BCD
;  - 256 for Min(7) FPS Per BCD
;  - 65 for 30FPS Per BCD
;  - 32 for 60 FPS Per BCD
;*/
;const int TIMER0_VALUE = 0; // MAX FPS per BCD
;const int TIMER1_VALUE = 0x7A11; // for timer1 = 1s
;
;static int active_port = 0;
;
;static unsigned int timer = 0;
;unsigned char timer_array[4] = {0};
;
;char bcd_encode(int num){
; 0000 0032 char bcd_encode(int num){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033     switch (num){
;PCODE: $0000000F VOL: 0
;	num -> Y+0
;PCODE: $00000010 VOL: 0
; 0000 0034      case 0:    return 0b0111111;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0035      case 1:    return 0b0000110;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0036      case 2:    return 0b1011011;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0037      case 3:    return 0b1001111;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0038      case 4:    return 0b1100110;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0039      case 5:    return 0b1101101;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003A      case 6:    return 0b1111101;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003B      case 7:    return 0b0000111;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003C      case 8:    return 0b1111111;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003D      case 9:    return 0b1101111;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003E     }
;PCODE: $0000004C VOL: 0
; 0000 003F }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;void timer0_tick_procedure(){
; 0000 0041 void timer0_tick_procedure(){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0042     if (active_port>=4)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0043         active_port = 0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0044 
; 0000 0045     PORTC = 0x0F & ~(1<<active_port);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0046     PORTD = bcd_encode(timer_array[active_port]);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0047 
; 0000 0048     active_port++;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0049 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;void timer1_tick_procedure(){
; 0000 004B void timer1_tick_procedure(){
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 004C     int i,digit=timer;
; 0000 004D     timer++;
;PCODE: $0000006C VOL: 0
;	i -> R16,R17
;	digit -> R18,R19
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004E 
; 0000 004F     for (i=0;i<4;i++){
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0050         timer_array[i] = digit%10;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0051         digit /= 10;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0052     }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0053 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0057 {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0058 
; 0000 0059     TCNT0= 0xFF - TIMER0_VALUE;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 005A     timer0_tick_procedure();
;PCODE: $00000095 VOL: 0
; 0000 005B 
; 0000 005C }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0060 {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0061 
; 0000 0062     TCNT1 = 0xFFFF - TIMER1_VALUE;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0063     timer1_tick_procedure();
;PCODE: $0000009D VOL: 0
; 0000 0064 }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;
;
;void main(void)
; 0000 0068 {
;PCODE: $000000A1 VOL: 0
; 0000 0069 // Declare your local variables here
; 0000 006A 
; 0000 006B DDRC= 0x0F;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 006C DDRD= 0xFF;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 006D 
; 0000 006E PORTC=0xFE;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 006F 
; 0000 0070 // Timer/Counter 0 initialization
; 0000 0071 // Clock source: System Clock
; 0000 0072 // Clock value: 7812 Hz
; 0000 0073 // Mode: Normal top=0xFF
; 0000 0074 // OC0 output: Disconnected
; 0000 0075 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0076 TCNT0=0xFF - TIMER0_VALUE;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0077 
; 0000 0078 
; 0000 0079 
; 0000 007A // Timer/Counter 1 initialization
; 0000 007B // Clock source: System Clock
; 0000 007C // Clock value: 31.250 kHz
; 0000 007D // Timer Period: 1 s
; 0000 007E // Timer1 Overflow Interrupt: On
; 0000 007F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0080 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0081 
; 0000 0082 //TCNT1H=0xE0;
; 0000 0083 //TCNT1L=0xC0;
; 0000 0084 TCNT1 = 0xFFFF - TIMER1_VALUE;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0085 
; 0000 0086 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0087 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0088 
; 0000 0089 // Global enable interrupts
; 0000 008A #asm("sei")
;PCODE: $000000B4 VOL: 0
	sei
;PCODE: $000000B5 VOL: 0
; 0000 008B 
; 0000 008C timer = 1;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 008D while (1);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 008E }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
