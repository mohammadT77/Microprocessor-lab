;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/16/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;static unsigned int timer_count = 0;
;static unsigned int timer = 0;
;
;char bcd_encode(int num){
; 0000 001E char bcd_encode(int num){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F     switch (num){
;PCODE: $0000000F VOL: 0
;	num -> Y+0
;PCODE: $00000010 VOL: 0
; 0000 0020      case 0:    return 0b0111111;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0021      case 1:    return 0b0000110;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0022      case 2:    return 0b1011011;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0023      case 3:    return 0b1001111;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0024      case 4:    return 0b1100110;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0025      case 5:    return 0b1101101;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0026      case 6:    return 0b1111101;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0027      case 7:    return 0b0000000;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0028      case 8:    return 0b0111111;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0029      case 9:    return 0b1111111;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 002A     }
;PCODE: $0000004C VOL: 0
; 0000 002B }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;void timer_tick_procedure(){
; 0000 002D void timer_tick_procedure(){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 002E 
; 0000 002F }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0033 {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0034 
; 0000 0035     TCNT0=0x9C; // Timer overflow : 1 ms
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0036     ++timer_count;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0037 
; 0000 0038     if (timer_count==1000) {  // Timer tick : 1s
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0039         timer_tick_procedure();
;PCODE: $0000005F VOL: 0
; 0000 003A         //PORTD = bcd_encode(++timer);
; 0000 003B         timer_count=0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003C     }
; 0000 003D 
; 0000 003E 
; 0000 003F }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;void main(void)
; 0000 0042 {
;PCODE: $00000066 VOL: 0
; 0000 0043 // Declare your local variables here
; 0000 0044 
; 0000 0045 DDRC= 0x0F;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0046 DDRD= 0xFF;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0047 
; 0000 0048 // Timer/Counter 0 initialization
; 0000 0049 // Clock source: System Clock
; 0000 004A // Clock value: 1000.000 kHz
; 0000 004B // Mode: Normal top=0xFF
; 0000 004C // OC0 output: Disconnected
; 0000 004D // Timer Period: 0.1 ms
; 0000 004E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004F TCNT0=0x9C;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0050 OCR0=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0051 
; 0000 0052 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0053 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0054 
; 0000 0055 //MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
; 0000 0056 //MCUCSR=(0<<ISC2);
; 0000 0057 
; 0000 0058 // Global enable interrupts
; 0000 0059 #asm("sei")
;PCODE: $00000073 VOL: 0
	sei
;PCODE: $00000074 VOL: 0
; 0000 005A 
; 0000 005B while (1)
;PCODE: $00000075 VOL: 0
; 0000 005C       {
; 0000 005D       // Place your code here
; 0000 005E         PORTC = 0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 005F         PORTD = bcd_encode(6);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0060       }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0061 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
